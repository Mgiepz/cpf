<!--===========================================================================
  This is the build file for the Community Dashboard Framework Plugin project.

  This build file will use the subfloor.xml file as the default build
  process and should only override the tasks that need to differ from
  the common build file.

  See subfloor.xml for more details
============================================================================-->
<project name="Community Plugin Framework P5" basedir="." default="jar"
         xmlns:ivy="antlib:org.apache.ivy.ant">

  <description>
    This build file is used to create the CPF project
    and works with the subfloor.xml file.
  </description>

  <!-- Import the subfloor.xml file which contains all the default tasks -->
  <import file="build-res/subfloor.xml"/>

  <!--
      AS STATED ABOVE, THE ONLY TASKS THAT SHOULD EXIST IN THIS BUILD FILE ARE
      THE TASKS THAT NEED TO DIFFER FROM THE DEFAULT IMPLEMENTATION OF THE TASKS
      FOUND IN subfloor.xml.
    -->


 <!-- Define the Sonar task if this hasn't been done in a common script -->
  <taskdef uri="antlib:org.sonar.ant" resource="org/sonar/ant/antlib.xml">
    <classpath path="sonar-ant-task-1.3.jar" />
  </taskdef>


  <property name="plugin.name"
            value="cpf"
            description="Name of the plugin"/>

  <property name="resource.dir"
            value="resources"
            description="Name of the resource directory"/>

  <property name="stage.dir"
            value="${bin.dir}/stage"
            description="Name of the resource directory"/>

  <property name="samples.stage.dir"
            value="${bin.dir}/stage-samples"
            description="Name of the resource directory" />

  <property name="src.extra.dir" value="${basedir}/../cpf-pentaho-base/src" description="Pentaho base" />
            
  <property name="plugin.artifact.id" value="${plugin.name}"/>
  <property name="plugin.zipfile" value="${plugin.artifact.id}-${distribution.version}.zip"/>
  <property name="plugin.samples.zipfile" value="${plugin.artifact.id}-samples-${distribution.version}.zip"/>
  <property name="plugin.solution.zipfile" value="${plugin.artifact.id}-solution-${distribution.version}.zip"/>
  
  <target name="compile.compile" depends="init" description="Performs the actual javac compile">
    <javac destdir="${classes.dir}"
           debug="${javac.debug}"
           deprecation="${javac.deprecation}"
           fork="true"
           source="${javac.source}"
           target="${javac.target}">
      <classpath>
        <path refid="classpath"/>
      </classpath>
        <src path="${src.extra.dir}"/>
    	<src path="${src.dir}"/>
    </javac>
  </target>



  <tstamp/>

  <!-- Build the project.revision property -->
  <property name="distribution.version" value="${project.stage}-${project.version}"/>


  <echo>distribution.version = ${distribution.version}</echo>

  <target name="dist" depends="clean,resolve,jar,source.jar"/>
  <target name="dist-compile" depends="jar"/>




 <!-- Add the target -->
 
 <target name="check-sonar-props">
      <available file="/home/tomcat/sonar.properties" property="sonar.props"/>    
      <echo>${sonar.props}</echo>
 </target>


<target name="read-sonar-props" depends="check-sonar-props" if="sonar.props">
<echo>Prop file exists</echo>
<loadproperties srcFile="/home/tomcat/sonar.properties"/>
</target>
 
  <target name="sonar" depends='read-sonar-props'>
    <!-- list of mandatories Sonar properties -->
    <property name="sonar.sources" value="${src.dir}" />
 
    <!-- list of optional Sonar properties -->
    <property name="sonar.binaries" value="${classes.dir}" />
    
    <sonar:sonar key="pt.webdetails:CPF" version="${distribution.version}" xmlns:sonar="antlib:org.sonar.ant"/>
  </target>



  <target name="resolve"
          depends="resolve-default, resolve-test, resolve-runtime, ivy.check-releasable"
          description="Retrieves all the dependent libraries" />


  <target name="resolve-runtime" depends="resolve-init">
    <ivy:resolve file="ivy.xml" conf="runtime" />
    <ivy:retrieve conf="runtime" pattern="runtime-lib/[module]-[revision](-[classifier]).[ext]" />
  </target>


  <!-- ================ 
        Legacy Compat
       ================ -->
  <target name="resolve-legacy" depends="resolve-init">
    <ivy:resolve file="ivy.xml" conf="legacy" />
    <ivy:retrieve conf="legacy" pattern="${lib.dir}/[module]-[revision](-[classifier]).[ext]" />
  </target>
  <target name="dist-legacy" depends="clean,resolve-legacy,jar"/>
  <!-- ================= --> 

  <!--=======================================================================
          publish-local-nojar (override)

          Publishes the jar and plugin zip package to the Maven repository
          ====================================================================-->
  <target name="publish-pentaho-nojar"
          depends="install-antcontrib,create-pom,ivy.deliver">
    <ant antfile="build-res/subfloor.xml" target="publish-local-nojar"/>

    <ivy:makepom ivyfile="package-ivy.xml" pomfile="plugin-pom.xml"/>
<!--    <ivy:makepom ivyfile="package-ivy.xml" pomfile="samples-pom.xml"/>
    <ivy:makepom ivyfile="package-ivy.xml" pomfile="solution-pom.xml"/>-->

<!--    <replace file="plugin-pom.xml" token="jar" value="zip"/>-->
    <replace file="plugin-pom.xml" token="%artifact-name%" value="${plugin.artifact.id}"/>
    <antcall target="maven-publish-artifact">
      <param name="publish.pomFile" value="plugin-pom.xml"/>
      <param name="publish.file" value="${dist.dir}/${ivy.artifact.id}-${project.revision}.jar"/>
    </antcall>

<!--    <replace file="samples-pom.xml" token="jar" value="zip"/>-->
<!--    <replace file="samples-pom.xml" token="%artifact-name%" value="${plugin.artifact.id}-samples"/>-->
<!--    <antcall target="maven-publish-artifact">
      <param name="publish.pomFile" value="samples-pom.xml"/>
      <param name="publish.file" value="${dist.dir}/${plugin.samples.zipfile}"/>
    </antcall>-->

  </target>
</project>
